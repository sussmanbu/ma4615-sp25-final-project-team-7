---
title: "Big Picture"
description: "A 538/Upshot style article about the data."
toc: true
draft: FALSE
filters:
  - shinylive
---

![](images/The_Big_Picture_2.jpeg)

This comes from the file `big_picture.qmd`.

Think of this page as your 538/Upshot style article. This means that you should try to tell a story through the data and your analysis. Read articles from those sites and similar sites to get a feeling for what they are like. Try to write in the style of a news or popular article. Importantly, this page should be geared towards the general public. You shouldn't assume the reader understands how to interpret a linear regression or a complicated plot. Focus on interpretation and visualizations.



---


### Interactive

Your Big Data page should also include a small interactive dashboard. The dashboard should be created either using Shinylive, as below. This interactive component should in some way support your thesis from your big picture page. Good interactives often provide both high-level understanding of the data while allowing a user to investigate specific scenarios, observations, subgroups, etc.




```{r}
#| eval: false
#| standalone: true
#| viewerHeight: 640 # You will have to adjust this to fit everything


library(shiny)
library(tidyverse)
options("readr.edition" = 1) # keep this to ensure you can download the data


# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  verticalLayout(
      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30),

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {
  # The URL below has to point to a dataset on your github pages website
  # I recommend creating a small-ish rds file that has only the data relevant to 
  # the interactive.
  data <- read_rds("https://sussmanbu.github.io/ma4615-final-project-quarto/dataset_for_shiny/combined_regional_data.rds")
  
  output$distPlot <- renderPlot({
    ggplot(data, aes(x = refusal_rate)) +
      geom_histogram(bins = input$bins + 1)

  })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

To get the shinylive-r working.
 
1. Make sure your shiny app works as a regular r chunk.
2. Make sure that the chunk is completely self-contained. Meaning all packages and data are loaded inside that chunk. It can't rely on any other chunks.
3. For the data that you are using for shiny, copy the rds file or any other files into the scripts folder, and then publish your website.
4. Where you load in your data, change it to use a URL to the data set which will now be on your website. Something like read_rds("https://sussmanbu.github.io/ma-4615-fa24-final-project-group-a/scripts/dataset_for_shiny.rds")
5. Check that the chunk still works as a regular r chunk.
6. Change it to a shinylive-r chunk.
7. Commit and publish your work.

I recommend keeping the data used for the shiny interactive relatively small, though this isn't completely necessary.

---




## Rubric: On this page


* Title
  * Your big picture page should have a creative/click-bait-y title/headline that provides a hint about your thesis.
* Clarity of Explanation
  * You should have a clear thesis/goal for this page. What are you trying to show? Make sure that you explain your analysis in detail but don't go into top much mathematics or statistics. The audience for this page is the general public (to the extent possible). Your thesis should be a statement, not a question.
  * Each figure should be very polished and also not too complicated. There should be a clear interpretation of the figure so the figure has a clear purpose. Even something like a histogram can be difficult to interpret for non-experts.
* Creativity
  * Do your best to make things interesting. Think of a how a news article or a magazine story might draw you in. Think of how each part of your analysis supports the previous part or provides a different perspective.
* Interactive component
  * Quality and ease of use of the interactive components.
Is it clear what can be explored using your interactive components?
Does it enhance and reinforce your conclusions?
* This page should be self-contained.
  
**Note**: This page should have no code visible, i.e. use `#| echo: FALSE`.  




## Rubric: Other components

### Video Recording

Make a video recording (probably using Zoom) demonstrating your interactive components.
You should provide a quick explanation of your data and demonstrate some of the conclusions from your EDA.
This video should be no longer than 4 minutes.
Include a link to your video (and password if needed) in your README.md file on your Github repository. You are not required to provide a link on the website.
This can be presented by any subset of the team members.


### Rest of the Site

Finally, here are important things to keep in mind for the rest of the site. 

The main title of your page is informative.
Each post has an author/description/informative title.
All lab required posts are present.
Each page (including the home page) has a nice featured image associated with it.
Your about page is up to date and clean.
You have removed the generic posts from the initial site template.


### Interactive in-progress:
**Use ```{r} and #|eval: false  to test**
```{r}
#| eval: false
#| standalone: true
#| viewerHeight: 3000

library(shiny)
library(tidyverse)
options("readr.edition" = 1)

# Load data
data <- read_rds("https://github.com/sussmanbu/ma4615-sp25-final-project-team-7/raw/refs/heads/main/dataset_for_shiny/cdi_shiny_data.rds")

# Prepare ordered stratification options
strata_choices <- c("Overall", sort(setdiff(unique(data$StratificationCategory1), "Overall")))

# Define UI
ui <- fluidPage(
  tags$head(
  tags$style(HTML("
    body {
      background-color: #f4f7fa;
      font-family: 'Segoe UI', sans-serif;
      color: #2c3e50;
    }
    .shiny-input-container {
      max-width: 600px;
      margin-bottom: 20px;
    }
    h3, h4 {
      color: #2c3e50;
    }
    .well {
      background-color: #e9eef4;
      border: 1px solid #cbd6e2;
      border-radius: 8px;
      padding: 20px;
    }
    .btn {
      background-color: #2980b9;
      color: white;
      border: none;
    }
    .btn:hover {
      background-color: #1c5980;
    }
    ul {
      font-size: 16px;
      color: #34495e;
    }
    li {
      margin-bottom: 10px;
    }
    #dataMessage {
      font-size: 16px;
      color: #555;
      margin-top: 10px;
    }
  "))
  ),
  titlePanel("U.S. Chronic Disease Explorer"),
  br(),
  h3("Explore Disease/Disorder Frequency by Topic, State, and Stratification"),
  wellPanel(
    selectInput("topic", "Select a Disease Topic:",
                choices = sort(unique(data$Topic))),
    selectInput("state", "Select a State:",
                choices = sort(setdiff(unique(data$LocationDesc), "United States"))),
    selectInput("strata_filter", "Select Stratification Category:",
                choices = strata_choices,
                selected = "Overall")
  ),
  hr(),
  h4("Visualization"),
  plotOutput("diseasePlot", height = "600px", width = "90%"),
  textOutput("dataMessage"),
  hr(),
  h4("Big Takeaways"),
  uiOutput("takeaways"),
  br()
)

# Define server
server <- function(input, output, session) {

  observe({
    updateSelectInput(
      session,
      "state",
      choices = sort(
        setdiff(
          data %>% filter(Topic == input$topic) %>% pull(LocationDesc) %>% unique(),
          "United States"
        )
      )
    )
  })

  filtered_data <- reactive({
    req(input$topic, input$state, input$strata_filter)
    data %>%
      filter(
        Topic == input$topic,
        LocationDesc %in% c(input$state, "United States"),
        StratificationCategory1 == input$strata_filter,
        DataValueType == "Crude Prevalence"
      )
  })

  output$diseasePlot <- renderPlot({
  df <- filtered_data()
  if (nrow(df) == 0) return(NULL)

  # Define your custom labels
  label_map <- c(
    "SEXM" = "Male", "SEXF" = "Female", "OVR" = "Overall",
    "AGE1844" = "18–44", "AGE0_44" = "0–44", "AGE4564" = "45–64",
    "AGE65P" = "65+", "AGE4M5Y" = "0–5", "AGE6_14" = "6–14",
    "AGE1_5" = "1–5", "AGE1217" = "12–17", "AGE6_9" = "6–9",
    "AGE1013" = "10–13", "AGE6_11" = "6–11",
    "GRD9" = "Grade 9", "GRD10" = "Grade 10", "GRD11" = "Grade 11", "GRD12" = "Grade 12",
    "WHT" = "White", "BLK" = "Black", "HIS" = "Hispanic", "MRC" = "Multiracial",
    "AIAN" = "American Indian/Alaskan Native", "ASN" = "Asian", "API" = "Asian or Pacific Islander",
    "HAPI" = "Hawaiian/Pacific Islander"
  )
  

  ggplot(df, aes(x = StratificationID1, y = DataValue, fill = LocationDesc)) +
    geom_col(position = "dodge") +
    facet_wrap(~ LocationDesc, ncol = 1) +
    labs(
      title = paste("Chronic Disease Data for", input$state, "vs United States"),
      x = "Stratification Group",
      y = "Prevalence",
      fill = "Location"
    ) +
    scale_fill_manual(values = setNames(c("#1f77b4", "#ff7f0e"), c("United States", input$state))) +
    scale_x_discrete(labels = label_map) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
})

  output$dataMessage <- renderText({
    df <- filtered_data()
    if (nrow(df) == 0) {
      "⚠️ No data available for the selected filters. Please try different options."
    } else {
      paste("✅ Showing", nrow(df), "records for", input$state, "and United States.")
    }
  })

  output$takeaways <- renderUI({
    df <- filtered_data()
    if (nrow(df) == 0) return(NULL)

    summary_df <- df %>%
      group_by(LocationDesc, StratificationID1) %>%
      summarize(mean_val = mean(DataValue, na.rm = TRUE), .groups = "drop") %>%
      pivot_wider(names_from = LocationDesc, values_from = mean_val) %>%
      filter(!is.na(`United States`) & !is.na(!!sym(input$state)))

    bullets <- summary_df %>%
      mutate(
        comparison = ifelse(
          !!sym(input$state) > `United States`, "higher", "lower"
        ),
        text = paste0(
          "The average crude prevalence of ", input$topic, " in ", input$state, 
          " for the ", StratificationID1, " ", input$strata_filter, 
          " group is ", round(!!sym(input$state), 2), ". This means that for every 100 people in the population, about ", round(!!sym(input$state), 0), " of them have a severe ", input$topic, " case. This is ", comparison, 
          " than the average prevalence across the United States, which is ", 
          round(`United States`, 2), ""
        )
      ) %>%
      pull(text)

    HTML(paste("<ul>", paste(paste0("<li>", bullets, "</li>"), collapse = ""), "</ul>"))
  })
}

shinyApp(ui = ui, server = server)
```

